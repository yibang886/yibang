<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.yibang</groupId>
  <artifactId>yibang</artifactId>
  <packaging>war</packaging>
  <version>1.0</version>
  <name>yibang Maven Webapp</name>
  <url>http://maven.apache.org</url>

  <dependencies>
    <!-- junit -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.0</version>
    </dependency>

    <!--Spring-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>4.0.4.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>4.0.4.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
      <version>4.0.4.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <version>4.0.4.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>4.0.4.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>4.0.4.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>4.0.4.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-orm</artifactId>
      <version>4.0.4.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-hibernate3</artifactId>
      <version>2.0.8</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>4.0.4.RELEASE</version>
    </dependency>

    <dependency>
      <groupId>c3p0</groupId>
      <artifactId>c3p0</artifactId>
      <version>0.9.1</version>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <version>3.3.2.GA</version>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-entitymanager</artifactId>
      <version>3.3.2.GA</version>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.13</version>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.3</version>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-fileupload</artifactId>
      <version>1.3.1</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.3</version>
    </dependency>
    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <version>1.8.3</version>
    </dependency>
    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>1.4</version>
    </dependency>

    <!--we don't use commons-logging anymore; it's replaced by slf4j;-->
    <!--
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.1.1</version>
    </dependency>
    -->

    <!-- 
    the programming API of slf4j; similar to commons-logging, slf4j is another general 
    logging API, it doesn't write log itself, but levages log4j, or logback to do that;
    -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.6</version>
    </dependency>

    <!--
    route the logging call programmed by slf4j-api to log4j; log4j is one of the 
    logging implementations which actually write the logs; logback is another one
    and it's recommended to be used; however, because spring framework uses log4j,
    we don't bother to involve logback but use log4j also;
    -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.6</version>
    </dependency>

    <!-- 
    if there is any logging programmed by java commons-logging (jcl), route it to 
    slf4j (which in turn routes it to actual logging implementation like log4j or
    logback), so that we have a common interface, slf4j, then, we can change the 
    logging implementation under slf4j freely; that is to say, logging programmed
    by commons-logging can be routed to slf4j and then to log4j or logback;
    note that logging programmed by commons-logging could be routed to log4j directly.
    -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>1.7.6</version>
    </dependency>

    <!-- 
    if there is any logging programmed by log4j directly (without a general logging API), 
    route it to slf4j, this is to keep a common interface, slf4j, so that we can change 
    the logging implementation under slf4j freely; that is to say, logging programmed by 
    log4j interface can be routed to slf4j and then to logback;
    -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
      <version>1.7.6</version>
    </dependency>

    <!-- 
    log4j is the logging implementation that actually writes the log; logback could 
    be a replacement
    -->
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
    </dependency>

    <!-- CGLIB is required to process @Configuration classes -->
    <dependency>
      <groupId>cglib</groupId>
      <artifactId>cglib</artifactId>
      <version>2.2.2</version>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.0.1</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>javassist</groupId>
      <artifactId>javassist</artifactId>
      <version>3.12.1.GA</version>
    </dependency>

    <dependency>
        <groupId>rt</groupId>
        <artifactId>rt</artifactId>
        <version>1.7</version>
    </dependency>

    <!-- mail.jar and activation.jar are needed for sending email -->
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>javax.activation</groupId>
      <artifactId>activation</artifactId>
      <version>1.0.2</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-lgpl</artifactId>
      <version>1.9.13</version>
    </dependency>
    <dependency>  
      <groupId>org.codehaus.jackson</groupId>  
      <artifactId>jackson-mapper-lgpl</artifactId>  
      <version>1.9.13</version>  
    </dependency>  
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
      <version>1.9.13</version>
    </dependency>
    <dependency>  
      <groupId>org.codehaus.jackson</groupId>  
      <artifactId>jackson-mapper-asl</artifactId>  
      <version>1.9.13</version>  
    </dependency>  

  </dependencies>

  <build>
    <finalName>yibang</finalName>
    <resources>

      <resource>  
        <!--
        targetPath is based on WEB-INF/classes, we don't specify targetPath, so .hbm.xml files are copied to
        WEB-INF/classes together with its containing directory (which is relative to src/main/java); that is 
        to say, .hbm.xml are placed in the same location as the .class files;
        -->
        <!-- <targetPath> </targetPath> -->
        <directory>src/main/java</directory>  
        <includes>  
          <include>**/*.hbm.xml</include>  
        </includes>  
      </resource>  

      <resource>
        <directory>src/conf</directory>
        <includes>
          <include>**/*.properties</include>
        </includes>
      </resource>

      <!-- no need to packed into war because it's in /var/www -->
      <!--
      <resource>  
        <directory>src/main/resources</directory>  
      </resource>  
      -->
    </resources>
  </build>
</project>
